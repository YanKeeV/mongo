using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Driver;
using System.Configuration;
using MongoDB.Bson.Serialization;

namespace lab_9
{
    class Program
    {
        class Git
        {
            public ObjectId Id { get; set; }
            public string branch { get; set; }
            public string description { get; set; }
            public string changes { get; set; }
            public autor autor { get; set; }
        }
        class autor
        {
            public string name { get; set; }
            public int age { get; set; }
            public string position { get; set; }
            public string country { get; set; }
        }

    static void Main(string[] args)
        {
            string connectionString = "mongodb://localhost:27017";
            MongoClient client = new MongoClient(connectionString);

            Console.WriteLine("");
            Console.WriteLine("Отримання всiх бд iз сервера");
            Console.WriteLine("");
            GetDatabaseNames(client).GetAwaiter();

            Console.ReadLine();
            Console.WriteLine("");
            Console.WriteLine("Отримаємо всi колекцiї всiх баз даних, якi є на серверi");
            Console.WriteLine("");
            GetCollectionsNames(client).GetAwaiter();

            Console.ReadLine();
            Console.WriteLine("");
            Console.WriteLine("Створимо модель даних");
            Console.WriteLine("");
            SimpleDocument();

            Console.WriteLine("");
            Console.WriteLine("При створеннi документа ми можемо скористатися як стандартним класом C#, так i класом BsonDocument");
            Console.WriteLine("");
            BSONDocument();
            Console.ReadLine();
        }
        private static async Task GetDatabaseNames(MongoClient client)
        {
            using (var cursor = await client.ListDatabasesAsync())
            {
                var databaseDocuments = await
                cursor.ToListAsync();
                foreach (var databaseDocument in databaseDocuments)
                {
                    Console.WriteLine(databaseDocument["name"]);
                }
            }
        }
        private static async Task
        GetCollectionsNames(MongoClient client)
        {
            using (var cursor = await client.ListDatabasesAsync())
            {
                var dbs = await cursor.ToListAsync();
                foreach (var db in dbs)
                {

                    Console.WriteLine("У базi даних {0} є наступнi колекцii: ", db["name"]);
                    IMongoDatabase database = client.GetDatabase(db["name"].ToString());
                    using (var collCursor = await database.ListCollectionsAsync())
                    {
                        var colls = await
                        collCursor.ToListAsync();
                        foreach (var col in colls)
                        {
                            Console.WriteLine(col["name"]);
                        }
                    }
                    Console.WriteLine();
                }
            }
        }
        private static async Task SimpleDocument()
        {
            Git git = new Git
            {
                branch = "master",
                description = "gfdgdfhbfg",
                changes = "sbdccbdjkfurekn",
            };
            git.autor = new autor
            {
                name = "Anatoliy", 
                age = 31, 
                position = "tester",
                country = "Moldova",
            };

            Console.WriteLine(git.ToJson());
            Console.WriteLine("");
            Console.WriteLine("Також можна виконати зворотну операцiю перетворення об'єкта в BsonDocument");
            Console.WriteLine("");
            ObjectToBson(git);
        }
        private static async Task BSONDocument()
        {
            BsonDocument doc = new BsonDocument
            {
                {"branch" , "relese"},
                {"description" , "some"},
                {"changes" , "change"},
                { "autor",
                    new BsonDocument
                    {
                        {"name" , "Zero"},
                        {"age" , 20},
                        {"position" , "programist"},
                        {"country" , "germany"}
                    }
                }
            };

            Git p = BsonSerializer.Deserialize<Git>(doc);
            Console.WriteLine(p.ToJson());
        }
        private static async Task ObjectToBson(Git git)
        {
            BsonDocument doc = git.ToBsonDocument();
            Console.WriteLine(doc);
        }
    }
}